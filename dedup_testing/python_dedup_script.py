import os
import random
import string
import json
import gzip
from pathlib import Path

# === CONFIG ===
NUM_FILES = 300
OUTPUT_DIR = "test_profiles"
PROFILES = {
    "low": (0.10, 0.20),
    "medium": (0.30, 0.40),
    "high": (0.60, 0.80)
}
FILE_TYPES = ['txt', 'json', 'md', 'log', 'html', 'xml', 'py', 'jpg', 'pdf', 'bin']

# === SHARED BLOCK POOLS ===
shared_text_blocks = {
    'txt': ["Lorem ipsum dolor sit amet.", "Shared footer for all documents.", "Generated by Nebula tester."],
    'json': ['{"meta": {"author": "test"}}', '{"config": {"timeout": 100}}'],
    'md': ["# Shared README", "## License", "MIT License applies"],
    'log': ["[INFO] Boot complete", "[WARN] Memory low"],
    'html': ["<!DOCTYPE html><html><body>", "<footer>Test Footer</footer>"],
    'xml': ["<config><retry>3</retry></config>", "<meta><author>tester</author></meta>"],
    'py': ["import os", "def shared_func(): pass"],
    # fallback shared blocks for safety
    'default': ["SHARED TEXT PLACEHOLDER"]
}

shared_binary_blocks = {
    'jpg': [b'\xFF\xD8\xFF\xE0' + os.urandom(100), b'\xFF\xD8\xFF\xDB' + os.urandom(128)],
    'pdf': [b'%PDF-1.4\n1 0 obj\n<< /Type /Catalog >>\nendobj\n', b'%PDF-1.4\n2 0 obj\n<< /Pages 3 0 R >>\nendobj\n'],
    'bin': [os.urandom(512), os.urandom(1024)],
    # fallback for unknown binary types
    'default': [os.urandom(512)]
}

# === HELPERS ===
def random_text_block(length=200):
    return ''.join(random.choices(string.ascii_letters + string.digits + ' \n\t', k=length))

def generate_file(file_path, file_type, shared_ratio):
    is_binary = file_type in ['jpg', 'pdf', 'bin']
    if is_binary:
        shared_pool = shared_binary_blocks.get(file_type, shared_binary_blocks['default'])
    else:
        shared_pool = shared_text_blocks.get(file_type, shared_text_blocks['default'])
    total_blocks = random.randint(20, 60)
    shared_count = int(total_blocks * shared_ratio)
    unique_count = total_blocks - shared_count

    # Select blocks
    shared = random.choices(shared_pool, k=shared_count)
    if is_binary:
        unique = [os.urandom(random.randint(256, 1024)) for _ in range(unique_count)]
        content_blocks = shared + unique
        random.shuffle(content_blocks)
        with open(file_path, 'wb') as f:
            for block in content_blocks:
                f.write(block)
    else:
        unique = [random_text_block(random.randint(128, 512)) for _ in range(unique_count)]
        content_blocks = shared + unique
        random.shuffle(content_blocks)
        with open(file_path, 'w', encoding='utf-8') as f:
            for block in content_blocks:
                f.write(block + '\n')

    return {
        "type": file_type,
        "shared_blocks": shared_count,
        "unique_blocks": unique_count,
        "total_blocks": total_blocks,
        "binary": is_binary
    }

# === MAIN GENERATOR ===
manifest_all = {}

for profile_name, (low, high) in PROFILES.items():
    profile_dir = Path(OUTPUT_DIR) / profile_name
    os.makedirs(profile_dir, exist_ok=True)
    manifest = {}

    print(f"\nGenerating {NUM_FILES} files for profile: {profile_name.upper()} (shared content: {int(low*100)}–{int(high*100)}%)")

    for i in range(NUM_FILES):
        file_type = random.choice(FILE_TYPES)
        shared_ratio = random.uniform(low, high)
        file_name = f"file_{i:04d}.{file_type}"
        file_path = profile_dir / file_name
        stats = generate_file(file_path, file_type, shared_ratio)
        manifest[file_name] = stats

    # Save manifest
    with open(profile_dir / "manifest.json", 'w') as f:
        json.dump(manifest, f, indent=2)

    manifest_all[profile_name] = manifest

# === Global summary ===
print("\n✅ File generation complete.")
print(f"Profiles created in: {OUTPUT_DIR}")
